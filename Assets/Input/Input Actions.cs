//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Input/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Shared Actions"",
            ""id"": ""0f2463f9-7aa9-41e3-9c2d-9db2518a0899"",
            ""actions"": [
                {
                    ""name"": ""Primary Action"",
                    ""type"": ""Button"",
                    ""id"": ""94cf9182-9a5d-42ac-b9f2-6e362ed27f5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Action"",
                    ""type"": ""Button"",
                    ""id"": ""edf206fb-c1d0-4adc-bf5c-5bf8e43b102d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cbf8129-928c-4a29-b5dc-6f1c6bdbd81f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b73aa903-ee3b-429e-a273-57209eeee375"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Editor Actions"",
            ""id"": ""433e8586-ef7c-4147-82e2-971136107cad"",
            ""actions"": [
                {
                    ""name"": ""Change Game Window Size"",
                    ""type"": ""Button"",
                    ""id"": ""9c68a32c-2029-40c1-8cb1-20ecb563f869"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LShift + Space"",
                    ""id"": ""06f69e08-09f9-42f9-8c18-36c5f026444b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dad0daaa-5026-4ecb-a739-2edf7edf6eee"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""5c53ccf6-d944-4ee6-851c-562896bf983f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI Actions"",
            ""id"": ""d82cca22-9ff9-4096-9f05-4b0b83328020"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""d7006468-aebe-4c55-9881-cd724125f4c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfe3e472-e1c7-426f-a567-29d8a64158a8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FPS View Actions"",
            ""id"": ""cd746fcf-5d60-46f3-bb56-4c70be8ca521"",
            ""actions"": [
                {
                    ""name"": ""Draw"",
                    ""type"": ""Button"",
                    ""id"": ""d88198b4-ff73-44ef-a776-03abcdb15bad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation Axis"",
                    ""type"": ""Value"",
                    ""id"": ""ab787ac3-7600-41f6-ab96-2850d4de7a8c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c8ed1db-a630-4eca-9a17-f018a93781f3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b1a3b1e-0590-4111-9e4c-6a1e9d1494d9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Top Down View Actions"",
            ""id"": ""3f4005a4-e73c-48e5-af2b-10bdf41b8017"",
            ""actions"": [
                {
                    ""name"": ""Drag Camera"",
                    ""type"": ""Value"",
                    ""id"": ""049e9e9e-8181-401f-961a-c641e854c7d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom Camera"",
                    ""type"": ""Value"",
                    ""id"": ""db1c4e20-9bea-4f63-97d5-1936153b38f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e896e7df-dfd0-4e62-aed4-11e6f6cb66ee"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""96c2f69b-1b9c-4f21-bdf3-e5157cbb3eaa"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""459d6ed7-0c41-478c-841f-9d6b22282a8f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""319e23e1-6f32-43b1-bb56-fa9f1a974e44"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FPS And Top Down Views Shared Actions"",
            ""id"": ""c13f02b5-fbac-4298-9a20-9f3f64d5bc6c"",
            ""actions"": [
                {
                    ""name"": ""FPS View Action"",
                    ""type"": ""Button"",
                    ""id"": ""96055eac-6ce4-43fe-926b-3720eff20059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Top Down View Action"",
                    ""type"": ""Button"",
                    ""id"": ""60e0ea1f-5b0d-474e-88ca-dfe6a21098c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87004691-1ca3-4f4b-9103-5c47904bd1e7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPS View Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a23d5c7a-ba76-4aaf-a5d8-df6f94473ff3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top Down View Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shared Actions
        m_SharedActions = asset.FindActionMap("Shared Actions", throwIfNotFound: true);
        m_SharedActions_PrimaryAction = m_SharedActions.FindAction("Primary Action", throwIfNotFound: true);
        m_SharedActions_SecondaryAction = m_SharedActions.FindAction("Secondary Action", throwIfNotFound: true);
        // Editor Actions
        m_EditorActions = asset.FindActionMap("Editor Actions", throwIfNotFound: true);
        m_EditorActions_ChangeGameWindowSize = m_EditorActions.FindAction("Change Game Window Size", throwIfNotFound: true);
        // UI Actions
        m_UIActions = asset.FindActionMap("UI Actions", throwIfNotFound: true);
        m_UIActions_Escape = m_UIActions.FindAction("Escape", throwIfNotFound: true);
        // FPS View Actions
        m_FPSViewActions = asset.FindActionMap("FPS View Actions", throwIfNotFound: true);
        m_FPSViewActions_Draw = m_FPSViewActions.FindAction("Draw", throwIfNotFound: true);
        m_FPSViewActions_RotationAxis = m_FPSViewActions.FindAction("Rotation Axis", throwIfNotFound: true);
        // Top Down View Actions
        m_TopDownViewActions = asset.FindActionMap("Top Down View Actions", throwIfNotFound: true);
        m_TopDownViewActions_DragCamera = m_TopDownViewActions.FindAction("Drag Camera", throwIfNotFound: true);
        m_TopDownViewActions_ZoomCamera = m_TopDownViewActions.FindAction("Zoom Camera", throwIfNotFound: true);
        // FPS And Top Down Views Shared Actions
        m_FPSAndTopDownViewsSharedActions = asset.FindActionMap("FPS And Top Down Views Shared Actions", throwIfNotFound: true);
        m_FPSAndTopDownViewsSharedActions_FPSViewAction = m_FPSAndTopDownViewsSharedActions.FindAction("FPS View Action", throwIfNotFound: true);
        m_FPSAndTopDownViewsSharedActions_TopDownViewAction = m_FPSAndTopDownViewsSharedActions.FindAction("Top Down View Action", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_SharedActions.enabled, "This will cause a leak and performance issues, InputActions.SharedActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_EditorActions.enabled, "This will cause a leak and performance issues, InputActions.EditorActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UIActions.enabled, "This will cause a leak and performance issues, InputActions.UIActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FPSViewActions.enabled, "This will cause a leak and performance issues, InputActions.FPSViewActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TopDownViewActions.enabled, "This will cause a leak and performance issues, InputActions.TopDownViewActions.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_FPSAndTopDownViewsSharedActions.enabled, "This will cause a leak and performance issues, InputActions.FPSAndTopDownViewsSharedActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shared Actions
    private readonly InputActionMap m_SharedActions;
    private List<ISharedActionsActions> m_SharedActionsActionsCallbackInterfaces = new List<ISharedActionsActions>();
    private readonly InputAction m_SharedActions_PrimaryAction;
    private readonly InputAction m_SharedActions_SecondaryAction;
    public struct SharedActionsActions
    {
        private @InputActions m_Wrapper;
        public SharedActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryAction => m_Wrapper.m_SharedActions_PrimaryAction;
        public InputAction @SecondaryAction => m_Wrapper.m_SharedActions_SecondaryAction;
        public InputActionMap Get() { return m_Wrapper.m_SharedActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SharedActionsActions set) { return set.Get(); }
        public void AddCallbacks(ISharedActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_SharedActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SharedActionsActionsCallbackInterfaces.Add(instance);
            @PrimaryAction.started += instance.OnPrimaryAction;
            @PrimaryAction.performed += instance.OnPrimaryAction;
            @PrimaryAction.canceled += instance.OnPrimaryAction;
            @SecondaryAction.started += instance.OnSecondaryAction;
            @SecondaryAction.performed += instance.OnSecondaryAction;
            @SecondaryAction.canceled += instance.OnSecondaryAction;
        }

        private void UnregisterCallbacks(ISharedActionsActions instance)
        {
            @PrimaryAction.started -= instance.OnPrimaryAction;
            @PrimaryAction.performed -= instance.OnPrimaryAction;
            @PrimaryAction.canceled -= instance.OnPrimaryAction;
            @SecondaryAction.started -= instance.OnSecondaryAction;
            @SecondaryAction.performed -= instance.OnSecondaryAction;
            @SecondaryAction.canceled -= instance.OnSecondaryAction;
        }

        public void RemoveCallbacks(ISharedActionsActions instance)
        {
            if (m_Wrapper.m_SharedActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISharedActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_SharedActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SharedActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SharedActionsActions @SharedActions => new SharedActionsActions(this);

    // Editor Actions
    private readonly InputActionMap m_EditorActions;
    private List<IEditorActionsActions> m_EditorActionsActionsCallbackInterfaces = new List<IEditorActionsActions>();
    private readonly InputAction m_EditorActions_ChangeGameWindowSize;
    public struct EditorActionsActions
    {
        private @InputActions m_Wrapper;
        public EditorActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeGameWindowSize => m_Wrapper.m_EditorActions_ChangeGameWindowSize;
        public InputActionMap Get() { return m_Wrapper.m_EditorActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActionsActions set) { return set.Get(); }
        public void AddCallbacks(IEditorActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_EditorActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditorActionsActionsCallbackInterfaces.Add(instance);
            @ChangeGameWindowSize.started += instance.OnChangeGameWindowSize;
            @ChangeGameWindowSize.performed += instance.OnChangeGameWindowSize;
            @ChangeGameWindowSize.canceled += instance.OnChangeGameWindowSize;
        }

        private void UnregisterCallbacks(IEditorActionsActions instance)
        {
            @ChangeGameWindowSize.started -= instance.OnChangeGameWindowSize;
            @ChangeGameWindowSize.performed -= instance.OnChangeGameWindowSize;
            @ChangeGameWindowSize.canceled -= instance.OnChangeGameWindowSize;
        }

        public void RemoveCallbacks(IEditorActionsActions instance)
        {
            if (m_Wrapper.m_EditorActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditorActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_EditorActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditorActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditorActionsActions @EditorActions => new EditorActionsActions(this);

    // UI Actions
    private readonly InputActionMap m_UIActions;
    private List<IUIActionsActions> m_UIActionsActionsCallbackInterfaces = new List<IUIActionsActions>();
    private readonly InputAction m_UIActions_Escape;
    public struct UIActionsActions
    {
        private @InputActions m_Wrapper;
        public UIActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_UIActions_Escape;
        public InputActionMap Get() { return m_Wrapper.m_UIActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionsActions set) { return set.Get(); }
        public void AddCallbacks(IUIActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IUIActionsActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IUIActionsActions instance)
        {
            if (m_Wrapper.m_UIActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActionsActions @UIActions => new UIActionsActions(this);

    // FPS View Actions
    private readonly InputActionMap m_FPSViewActions;
    private List<IFPSViewActionsActions> m_FPSViewActionsActionsCallbackInterfaces = new List<IFPSViewActionsActions>();
    private readonly InputAction m_FPSViewActions_Draw;
    private readonly InputAction m_FPSViewActions_RotationAxis;
    public struct FPSViewActionsActions
    {
        private @InputActions m_Wrapper;
        public FPSViewActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Draw => m_Wrapper.m_FPSViewActions_Draw;
        public InputAction @RotationAxis => m_Wrapper.m_FPSViewActions_RotationAxis;
        public InputActionMap Get() { return m_Wrapper.m_FPSViewActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSViewActionsActions set) { return set.Get(); }
        public void AddCallbacks(IFPSViewActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSViewActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSViewActionsActionsCallbackInterfaces.Add(instance);
            @Draw.started += instance.OnDraw;
            @Draw.performed += instance.OnDraw;
            @Draw.canceled += instance.OnDraw;
            @RotationAxis.started += instance.OnRotationAxis;
            @RotationAxis.performed += instance.OnRotationAxis;
            @RotationAxis.canceled += instance.OnRotationAxis;
        }

        private void UnregisterCallbacks(IFPSViewActionsActions instance)
        {
            @Draw.started -= instance.OnDraw;
            @Draw.performed -= instance.OnDraw;
            @Draw.canceled -= instance.OnDraw;
            @RotationAxis.started -= instance.OnRotationAxis;
            @RotationAxis.performed -= instance.OnRotationAxis;
            @RotationAxis.canceled -= instance.OnRotationAxis;
        }

        public void RemoveCallbacks(IFPSViewActionsActions instance)
        {
            if (m_Wrapper.m_FPSViewActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSViewActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSViewActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSViewActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSViewActionsActions @FPSViewActions => new FPSViewActionsActions(this);

    // Top Down View Actions
    private readonly InputActionMap m_TopDownViewActions;
    private List<ITopDownViewActionsActions> m_TopDownViewActionsActionsCallbackInterfaces = new List<ITopDownViewActionsActions>();
    private readonly InputAction m_TopDownViewActions_DragCamera;
    private readonly InputAction m_TopDownViewActions_ZoomCamera;
    public struct TopDownViewActionsActions
    {
        private @InputActions m_Wrapper;
        public TopDownViewActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragCamera => m_Wrapper.m_TopDownViewActions_DragCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_TopDownViewActions_ZoomCamera;
        public InputActionMap Get() { return m_Wrapper.m_TopDownViewActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownViewActionsActions set) { return set.Get(); }
        public void AddCallbacks(ITopDownViewActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_TopDownViewActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TopDownViewActionsActionsCallbackInterfaces.Add(instance);
            @DragCamera.started += instance.OnDragCamera;
            @DragCamera.performed += instance.OnDragCamera;
            @DragCamera.canceled += instance.OnDragCamera;
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
        }

        private void UnregisterCallbacks(ITopDownViewActionsActions instance)
        {
            @DragCamera.started -= instance.OnDragCamera;
            @DragCamera.performed -= instance.OnDragCamera;
            @DragCamera.canceled -= instance.OnDragCamera;
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
        }

        public void RemoveCallbacks(ITopDownViewActionsActions instance)
        {
            if (m_Wrapper.m_TopDownViewActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITopDownViewActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_TopDownViewActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TopDownViewActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TopDownViewActionsActions @TopDownViewActions => new TopDownViewActionsActions(this);

    // FPS And Top Down Views Shared Actions
    private readonly InputActionMap m_FPSAndTopDownViewsSharedActions;
    private List<IFPSAndTopDownViewsSharedActionsActions> m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces = new List<IFPSAndTopDownViewsSharedActionsActions>();
    private readonly InputAction m_FPSAndTopDownViewsSharedActions_FPSViewAction;
    private readonly InputAction m_FPSAndTopDownViewsSharedActions_TopDownViewAction;
    public struct FPSAndTopDownViewsSharedActionsActions
    {
        private @InputActions m_Wrapper;
        public FPSAndTopDownViewsSharedActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FPSViewAction => m_Wrapper.m_FPSAndTopDownViewsSharedActions_FPSViewAction;
        public InputAction @TopDownViewAction => m_Wrapper.m_FPSAndTopDownViewsSharedActions_TopDownViewAction;
        public InputActionMap Get() { return m_Wrapper.m_FPSAndTopDownViewsSharedActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSAndTopDownViewsSharedActionsActions set) { return set.Get(); }
        public void AddCallbacks(IFPSAndTopDownViewsSharedActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces.Add(instance);
            @FPSViewAction.started += instance.OnFPSViewAction;
            @FPSViewAction.performed += instance.OnFPSViewAction;
            @FPSViewAction.canceled += instance.OnFPSViewAction;
            @TopDownViewAction.started += instance.OnTopDownViewAction;
            @TopDownViewAction.performed += instance.OnTopDownViewAction;
            @TopDownViewAction.canceled += instance.OnTopDownViewAction;
        }

        private void UnregisterCallbacks(IFPSAndTopDownViewsSharedActionsActions instance)
        {
            @FPSViewAction.started -= instance.OnFPSViewAction;
            @FPSViewAction.performed -= instance.OnFPSViewAction;
            @FPSViewAction.canceled -= instance.OnFPSViewAction;
            @TopDownViewAction.started -= instance.OnTopDownViewAction;
            @TopDownViewAction.performed -= instance.OnTopDownViewAction;
            @TopDownViewAction.canceled -= instance.OnTopDownViewAction;
        }

        public void RemoveCallbacks(IFPSAndTopDownViewsSharedActionsActions instance)
        {
            if (m_Wrapper.m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSAndTopDownViewsSharedActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSAndTopDownViewsSharedActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSAndTopDownViewsSharedActionsActions @FPSAndTopDownViewsSharedActions => new FPSAndTopDownViewsSharedActionsActions(this);
    public interface ISharedActionsActions
    {
        void OnPrimaryAction(InputAction.CallbackContext context);
        void OnSecondaryAction(InputAction.CallbackContext context);
    }
    public interface IEditorActionsActions
    {
        void OnChangeGameWindowSize(InputAction.CallbackContext context);
    }
    public interface IUIActionsActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IFPSViewActionsActions
    {
        void OnDraw(InputAction.CallbackContext context);
        void OnRotationAxis(InputAction.CallbackContext context);
    }
    public interface ITopDownViewActionsActions
    {
        void OnDragCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
    }
    public interface IFPSAndTopDownViewsSharedActionsActions
    {
        void OnFPSViewAction(InputAction.CallbackContext context);
        void OnTopDownViewAction(InputAction.CallbackContext context);
    }
}
