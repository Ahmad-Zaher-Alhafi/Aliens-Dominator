//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Shared Actions"",
            ""id"": ""0f2463f9-7aa9-41e3-9c2d-9db2518a0899"",
            ""actions"": [
                {
                    ""name"": ""Primary Action"",
                    ""type"": ""Button"",
                    ""id"": ""94cf9182-9a5d-42ac-b9f2-6e362ed27f5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Action"",
                    ""type"": ""Button"",
                    ""id"": ""edf206fb-c1d0-4adc-bf5c-5bf8e43b102d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FPS View Action"",
                    ""type"": ""Button"",
                    ""id"": ""fcb71ba9-061a-420a-84c3-8ef7f1480236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Top Down View Action"",
                    ""type"": ""Button"",
                    ""id"": ""c57f88c1-fa09-4e7a-b58c-db9ba8db6439"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Axis"",
                    ""type"": ""Value"",
                    ""id"": ""2a942213-428e-4f7d-99a5-3c278769c168"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cbf8129-928c-4a29-b5dc-6f1c6bdbd81f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b73aa903-ee3b-429e-a273-57209eeee375"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19be8f00-888e-4b37-b4f5-4d833e950f94"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPS View Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4657b5b4-7cfa-4d77-ac3c-0944d68ee729"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Top Down View Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9db4314b-9fc0-4ee1-aa6a-5675f68c8350"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Editor Actions"",
            ""id"": ""433e8586-ef7c-4147-82e2-971136107cad"",
            ""actions"": [
                {
                    ""name"": ""Change Game Window Size"",
                    ""type"": ""Button"",
                    ""id"": ""9c68a32c-2029-40c1-8cb1-20ecb563f869"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LShift + Space"",
                    ""id"": ""06f69e08-09f9-42f9-8c18-36c5f026444b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dad0daaa-5026-4ecb-a739-2edf7edf6eee"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""5c53ccf6-d944-4ee6-851c-562896bf983f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Game Window Size"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI Actions"",
            ""id"": ""d82cca22-9ff9-4096-9f05-4b0b83328020"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""d7006468-aebe-4c55-9881-cd724125f4c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfe3e472-e1c7-426f-a567-29d8a64158a8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shared Actions
        m_SharedActions = asset.FindActionMap("Shared Actions", throwIfNotFound: true);
        m_SharedActions_PrimaryAction = m_SharedActions.FindAction("Primary Action", throwIfNotFound: true);
        m_SharedActions_SecondaryAction = m_SharedActions.FindAction("Secondary Action", throwIfNotFound: true);
        m_SharedActions_FPSViewAction = m_SharedActions.FindAction("FPS View Action", throwIfNotFound: true);
        m_SharedActions_TopDownViewAction = m_SharedActions.FindAction("Top Down View Action", throwIfNotFound: true);
        m_SharedActions_MouseAxis = m_SharedActions.FindAction("Mouse Axis", throwIfNotFound: true);
        // Editor Actions
        m_EditorActions = asset.FindActionMap("Editor Actions", throwIfNotFound: true);
        m_EditorActions_ChangeGameWindowSize = m_EditorActions.FindAction("Change Game Window Size", throwIfNotFound: true);
        // UI Actions
        m_UIActions = asset.FindActionMap("UI Actions", throwIfNotFound: true);
        m_UIActions_Escape = m_UIActions.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shared Actions
    private readonly InputActionMap m_SharedActions;
    private ISharedActionsActions m_SharedActionsActionsCallbackInterface;
    private readonly InputAction m_SharedActions_PrimaryAction;
    private readonly InputAction m_SharedActions_SecondaryAction;
    private readonly InputAction m_SharedActions_FPSViewAction;
    private readonly InputAction m_SharedActions_TopDownViewAction;
    private readonly InputAction m_SharedActions_MouseAxis;
    public struct SharedActionsActions
    {
        private @InputActions m_Wrapper;
        public SharedActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryAction => m_Wrapper.m_SharedActions_PrimaryAction;
        public InputAction @SecondaryAction => m_Wrapper.m_SharedActions_SecondaryAction;
        public InputAction @FPSViewAction => m_Wrapper.m_SharedActions_FPSViewAction;
        public InputAction @TopDownViewAction => m_Wrapper.m_SharedActions_TopDownViewAction;
        public InputAction @MouseAxis => m_Wrapper.m_SharedActions_MouseAxis;
        public InputActionMap Get() { return m_Wrapper.m_SharedActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SharedActionsActions set) { return set.Get(); }
        public void SetCallbacks(ISharedActionsActions instance)
        {
            if (m_Wrapper.m_SharedActionsActionsCallbackInterface != null)
            {
                @PrimaryAction.started -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnPrimaryAction;
                @PrimaryAction.performed -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnPrimaryAction;
                @PrimaryAction.canceled -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnPrimaryAction;
                @SecondaryAction.started -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnSecondaryAction;
                @SecondaryAction.performed -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnSecondaryAction;
                @SecondaryAction.canceled -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnSecondaryAction;
                @FPSViewAction.started -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnFPSViewAction;
                @FPSViewAction.performed -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnFPSViewAction;
                @FPSViewAction.canceled -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnFPSViewAction;
                @TopDownViewAction.started -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnTopDownViewAction;
                @TopDownViewAction.performed -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnTopDownViewAction;
                @TopDownViewAction.canceled -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnTopDownViewAction;
                @MouseAxis.started -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnMouseAxis;
                @MouseAxis.performed -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnMouseAxis;
                @MouseAxis.canceled -= m_Wrapper.m_SharedActionsActionsCallbackInterface.OnMouseAxis;
            }
            m_Wrapper.m_SharedActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryAction.started += instance.OnPrimaryAction;
                @PrimaryAction.performed += instance.OnPrimaryAction;
                @PrimaryAction.canceled += instance.OnPrimaryAction;
                @SecondaryAction.started += instance.OnSecondaryAction;
                @SecondaryAction.performed += instance.OnSecondaryAction;
                @SecondaryAction.canceled += instance.OnSecondaryAction;
                @FPSViewAction.started += instance.OnFPSViewAction;
                @FPSViewAction.performed += instance.OnFPSViewAction;
                @FPSViewAction.canceled += instance.OnFPSViewAction;
                @TopDownViewAction.started += instance.OnTopDownViewAction;
                @TopDownViewAction.performed += instance.OnTopDownViewAction;
                @TopDownViewAction.canceled += instance.OnTopDownViewAction;
                @MouseAxis.started += instance.OnMouseAxis;
                @MouseAxis.performed += instance.OnMouseAxis;
                @MouseAxis.canceled += instance.OnMouseAxis;
            }
        }
    }
    public SharedActionsActions @SharedActions => new SharedActionsActions(this);

    // Editor Actions
    private readonly InputActionMap m_EditorActions;
    private IEditorActionsActions m_EditorActionsActionsCallbackInterface;
    private readonly InputAction m_EditorActions_ChangeGameWindowSize;
    public struct EditorActionsActions
    {
        private @InputActions m_Wrapper;
        public EditorActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeGameWindowSize => m_Wrapper.m_EditorActions_ChangeGameWindowSize;
        public InputActionMap Get() { return m_Wrapper.m_EditorActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActionsActions set) { return set.Get(); }
        public void SetCallbacks(IEditorActionsActions instance)
        {
            if (m_Wrapper.m_EditorActionsActionsCallbackInterface != null)
            {
                @ChangeGameWindowSize.started -= m_Wrapper.m_EditorActionsActionsCallbackInterface.OnChangeGameWindowSize;
                @ChangeGameWindowSize.performed -= m_Wrapper.m_EditorActionsActionsCallbackInterface.OnChangeGameWindowSize;
                @ChangeGameWindowSize.canceled -= m_Wrapper.m_EditorActionsActionsCallbackInterface.OnChangeGameWindowSize;
            }
            m_Wrapper.m_EditorActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeGameWindowSize.started += instance.OnChangeGameWindowSize;
                @ChangeGameWindowSize.performed += instance.OnChangeGameWindowSize;
                @ChangeGameWindowSize.canceled += instance.OnChangeGameWindowSize;
            }
        }
    }
    public EditorActionsActions @EditorActions => new EditorActionsActions(this);

    // UI Actions
    private readonly InputActionMap m_UIActions;
    private IUIActionsActions m_UIActionsActionsCallbackInterface;
    private readonly InputAction m_UIActions_Escape;
    public struct UIActionsActions
    {
        private @InputActions m_Wrapper;
        public UIActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_UIActions_Escape;
        public InputActionMap Get() { return m_Wrapper.m_UIActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionsActions set) { return set.Get(); }
        public void SetCallbacks(IUIActionsActions instance)
        {
            if (m_Wrapper.m_UIActionsActionsCallbackInterface != null)
            {
                @Escape.started -= m_Wrapper.m_UIActionsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_UIActionsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_UIActionsActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_UIActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public UIActionsActions @UIActions => new UIActionsActions(this);
    public interface ISharedActionsActions
    {
        void OnPrimaryAction(InputAction.CallbackContext context);
        void OnSecondaryAction(InputAction.CallbackContext context);
        void OnFPSViewAction(InputAction.CallbackContext context);
        void OnTopDownViewAction(InputAction.CallbackContext context);
        void OnMouseAxis(InputAction.CallbackContext context);
    }
    public interface IEditorActionsActions
    {
        void OnChangeGameWindowSize(InputAction.CallbackContext context);
    }
    public interface IUIActionsActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
}
